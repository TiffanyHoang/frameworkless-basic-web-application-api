AWSTemplateFormatVersion: 2010-09-09
Parameters:
  version:
    Type: String
  imageVersion:
    Type: String
  vpcId:
    Type: String
  subnet1:
    Type: String
  subnet2: 
    Type: String
  certificate:
    Type: String
  domainName:
    Type: String 
  hostedZoneId:
    Type: String
  CNAMERecordName:
    Type: String
  CNAMERecordValue:
    Type: String
  secret:
    Type: String
Resources:
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow all myob melb and syd ip, bk grace and fma-dev agents to access Application Load Balancer
      GroupName: !Sub tiffany-api-sg-lb-${version}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: 203.34.100.0/24
          Description: Melbourne DC
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: 49.255.41.116/30
          Description: Sydney Kent Street
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: 124.254.104.108/30
          Description: Melbourne Cremorne
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: 54.252.144.93/32
          Description: ops-bk-grace-lab
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: 54.252.51.13/32
          Description: ops-bk-grace-lab
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: 13.210.196.83/32
          Description: ops-bk-fma-dev
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 443
          CidrIp: 3.105.52.160/32
          Description: ops-bk-fma-dev 
      VpcId: !Ref vpcId
  ApplicationSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow load balancer to access application
      GroupName: !Sub tiffany-api-sg-${version}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupName: !Sub tiffany-api-sg-lb-${version}
          Description: !Sub tiffany-api-sg-lb-${version}
      VpcId: !Ref vpcId
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Sub tiffany-api-lb-${version}
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Subnets: 
        - !Ref subnet1
        - !Ref subnet2
      Type: application
  ListenerForHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: "redirect"
          RedirectConfig: 
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  ListenerForHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates: 
        - CertificateArn: !Ref certificate
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-2016-08
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckPath: /health
      Name: !Sub tiffany-api-target-group-${version}
      TargetType: ip
      VpcId: !Ref vpcId
      Protocol: HTTP
      Port: 8080
    DependsOn: LoadBalancer
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties: 
      Family: !Sub tiffany-api-task-${version}
      TaskRoleArn: ecsTaskExecutionRole
      ExecutionRoleArn: ecsTaskExecutionRole
      NetworkMode: awsvpc
      RequiresCompatibilities: 
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ContainerDefinitions: 
        - Name: !Sub tiff-app-api-${version}
          Image: !Sub 274387265859.dkr.ecr.ap-southeast-2.amazonaws.com/tiffany-frameworkless-basic-web-app-api:${imageVersion}
          PortMappings: 
            - ContainerPort: 8080
          Environment:
            - name: SECRET
              value: !Ref secret
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders: 
        - FARGATE
      ClusterName: !Sub tiffany-api-cluster-${version}
  ECSService:
    Type: AWS::ECS::Service
    Properties: 
      LaunchType: FARGATE
      Cluster: !Ref ECSCluster
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref ApplicationSecurityGroup
          Subnets: 
            - !Ref subnet1
      ServiceName: !Sub tiffany-api-service-${version}
      TaskDefinition: !Ref TaskDefinition 
      LoadBalancers:
      - TargetGroupArn: !Ref TargetGroup
        ContainerPort: 8080
        ContainerName: !Sub tiff-app-api-${version}
    DependsOn: 
    - ListenerForHTTP
    - ListenerForHTTPS
  RouteTrafficRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref hostedZoneId
      Comment: Add A record to load balancer
      RecordSets:
      - Name: !Ref domainName
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt LoadBalancer.DNSName
    DependsOn: LoadBalancer
  CNAMERecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref hostedZoneId
      Name: !Ref CNAMERecordName
      ResourceRecords:
      - !Ref CNAMERecordValue
      Type: CNAME
      TTL: 300